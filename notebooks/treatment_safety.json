{
    "id":"2a735861-c714-48cb-abb0-1d95191e7a50",
    "name":"TreatmentSafety",
    "notebookContent":"---\nipynb_metadata:\n  language_info:\n    name: python\njupystar:\n  version: 0.2.1\n---\n# %% [markdown]\n\n### Treatment Safety Network Study Using Strategus - PLP Study\n# %% [markdown]\n##### Research Question - For a given patient, who is a new user of celecoxib, what is the probability that they will have GI bleed in 1 year?\n# %% [markdown]\n##### Step 1 - Import the necessary libraries\n\n# %% [jupyter]\n# import libraries\nlibrary(rD2E)\nlibrary(Strategus)\nlibrary(dplyr)\n# %% [markdown]\n##### Step 2 - Cohort definition loading\n# %% [jupyter]\ntarCohortId <- 12\noutCohortId <- 11\ncohorts_set <- c(tarCohortId, outCohortId)\ncohortDefinitionSet <- rD2E::get_cohort_definition_set(cohorts_set)\n\n# %% [markdown]\n##### Step 3 - Define the network study components\n# %% [jupyter]\n# If you are not restricting your study to a specific time window,\n# please make these strings empty\nstudyStartDate <- '19001201' # YYYYMMDD\nstudyEndDate <- '20231231'   # YYYYMMDD\n\n\n# PLP time-at-risks should try to use fixed-time TARs\nplpTimeAtRisks <- tibble(\n  riskWindowStart  = c(1),\n  startAnchor = c(\"cohort start\"),\n  riskWindowEnd  = c(365),\n  endAnchor = c(\"cohort start\")\n)\n\n# Outcomes: The outcome for this study is cohort_id == outcomeCohortId\noList <- cohortDefinitionSet %>%\n  filter(.data$cohortId == outCohortId) %>%\n  mutate(outcomeCohortId = cohortId, outcomeCohortName = cohortName) %>%\n  select(outcomeCohortId, outcomeCohortName) %>%\n  mutate(cleanWindow = 365)\n# %% [markdown]\nCreate settings for modules involved in the study\n# %% [jupyter]\n# CohortGeneratorModule --------------------------------------------------------\ncgModuleSettingsCreator <- CohortGeneratorModule$new()\ncohortDefinitionShared <- cgModuleSettingsCreator$createCohortSharedResourceSpecifications(cohortDefinitionSet)\ncohortGeneratorModuleSpecifications <- cgModuleSettingsCreator$createModuleSpecifications(\n  generateStats = TRUE\n)\n\n# PatientLevelPredictionModule -------------------------------------------------\nplpModuleSettingsCreator <- PatientLevelPredictionModule$new()\n\nmodelSettings <- list(\n  lassoLogisticRegression = PatientLevelPrediction::setLassoLogisticRegression()\n)\n# %% [jupyter]\nmodelDesignList <- list()\ntcIds <- cohortDefinitionSet %>%\n  filter(cohortId != 3) %>%\n  pull(cohortId)\n\nfor (cohortId in tcIds) {\n  for (j in seq_len(nrow(plpTimeAtRisks))) {\n    for (k in seq_len(nrow(oList))) {\n      priorOutcomeLookback <- 99999\n      for (mSetting in modelSettings) {\n        modelDesignList[[length(modelDesignList) + 1]] <- PatientLevelPrediction::createModelDesign(\n          targetId = cohortId,\n          outcomeId = oList$outcomeCohortId[k],\n          restrictPlpDataSettings = PatientLevelPrediction::createRestrictPlpDataSettings(\n            sampleSize = 1000000,\n            studyStartDate = studyStartDate,\n            studyEndDate = studyEndDate,\n            firstExposureOnly = FALSE,\n            washoutPeriod = 0\n          ),\n          populationSettings = PatientLevelPrediction::createStudyPopulationSettings(\n            riskWindowStart = plpTimeAtRisks$riskWindowStart[j],\n            startAnchor = plpTimeAtRisks$startAnchor[j],\n            riskWindowEnd = plpTimeAtRisks$riskWindowEnd[j],\n            endAnchor = plpTimeAtRisks$endAnchor[j],\n            removeSubjectsWithPriorOutcome = TRUE,\n            priorOutcomeLookback = priorOutcomeLookback,\n            requireTimeAtRisk = FALSE,\n            binary = TRUE,\n            includeAllOutcomes = TRUE,\n            firstExposureOnly = FALSE,\n            washoutPeriod = 0,\n            minTimeAtRisk = plpTimeAtRisks$riskWindowEnd[j] - plpTimeAtRisks$riskWindowStart[j],\n            restrictTarToCohortEnd = FALSE\n          ),\n          covariateSettings = FeatureExtraction::createCovariateSettings(\n            useDemographicsGender = TRUE,\n            useDemographicsAgeGroup = TRUE,\n            useConditionGroupEraLongTerm = TRUE,\n            useDrugGroupEraLongTerm = TRUE,\n            useVisitConceptCountLongTerm = TRUE\n          ),\n          preprocessSettings = PatientLevelPrediction::createPreprocessSettings(),\n          modelSettings = mSetting\n        )\n      }\n    }\n  }\n}\n\nplpModuleSpecifications <- plpModuleSettingsCreator$createModuleSpecifications(\n  modelDesignList = modelDesignList\n)\n# %% [markdown]\nCreate the analysis specification object - including all the modules and configurations created above\n# %% [jupyter]\n# Create the analysis specifications ------------------------------------------\nanalysisSpecifications <- Strategus::createEmptyAnalysisSpecificiations() |>\n  Strategus::addSharedResources(cohortDefinitionShared) |> \n  Strategus::addModuleSpecifications(cohortGeneratorModuleSpecifications) |>\n  Strategus::addModuleSpecifications(plpModuleSpecifications)\n# %% [markdown]\n##### Step 4 - Execute the Strategus study\n# %% [jupyter]\noptions <- create_options(upload_results=TRUE, study_id = 'treatment_pathways_study_7') # set a study_id with a unique id\noptions$study_id = 'treatment_pathways_study_7'\nrD2E::run_strategus_flow(analysisSpecification = analysisSpecifications, options = options)",
    "isShared":false,
    "datasetId":"67f4015c-04f0-4a92-939b-20c361c2e50a"
}