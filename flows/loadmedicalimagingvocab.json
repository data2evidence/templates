{
    "name": "LoadMedicalImagingVocab",
    "description": "Load medical imaging vocabulary into the database",
    "edges": [
      {
        "id": "9af67da1-d45d-4d17-a69c-e4f34cf81417",
        "source": "ba7291a9-dcb6-47df-90d3-c8c5c8fa468d",
        "target": "80f6a837-6125-4ab2-8b60-ab7f2fac2731",
        "selected": false
      },
      {
        "id": "reactflow__edge-d4066246-51ed-40be-a036-e041d796fa7csource_d4066246-51ed-40be-a036-e041d796fa7c_dataframe-12d22e50-14aa-45c0-9d74-70c002b3fdbctarget_12d22e50-14aa-45c0-9d74-70c002b3fdbc_dataframe",
        "source": "d4066246-51ed-40be-a036-e041d796fa7c",
        "target": "12d22e50-14aa-45c0-9d74-70c002b3fdbc",
        "sourceHandle": "source_d4066246-51ed-40be-a036-e041d796fa7c_dataframe",
        "targetHandle": "target_12d22e50-14aa-45c0-9d74-70c002b3fdbc_dataframe"
      },
      {
        "id": "9d7fe130-f86f-4cd1-857f-cfa00d01be8a",
        "source": "1aa8de3e-d66c-496e-bcf3-b183ddd82f9c",
        "target": "45c20162-1bbd-4c23-94df-1aab8eaa5181"
      },
      {
        "id": "bb5abb0e-04c6-433c-86fa-4776b832b865",
        "source": "45c20162-1bbd-4c23-94df-1aab8eaa5181",
        "target": "de1a7740-824f-445f-8825-cb5d58fc17a5"
      },
      {
        "id": "reactflow__edge-b84ca941-eb38-4105-8ccf-8ca269eb57ffsource_b84ca941-eb38-4105-8ccf-8ca269eb57ff_object-8b5de6a8-08c3-42a8-8a76-3a809e77bfddtarget_8b5de6a8-08c3-42a8-8a76-3a809e77bfdd_object",
        "source": "b84ca941-eb38-4105-8ccf-8ca269eb57ff",
        "target": "8b5de6a8-08c3-42a8-8a76-3a809e77bfdd",
        "selected": false,
        "sourceHandle": "source_b84ca941-eb38-4105-8ccf-8ca269eb57ff_object",
        "targetHandle": "target_8b5de6a8-08c3-42a8-8a76-3a809e77bfdd_object"
      },
      {
        "id": "reactflow__edge-b84ca941-eb38-4105-8ccf-8ca269eb57ffsource_b84ca941-eb38-4105-8ccf-8ca269eb57ff_object-339fabc0-643d-46ff-acf0-989617ff5edctarget_339fabc0-643d-46ff-acf0-989617ff5edc_object",
        "source": "b84ca941-eb38-4105-8ccf-8ca269eb57ff",
        "target": "339fabc0-643d-46ff-acf0-989617ff5edc",
        "selected": false,
        "sourceHandle": "source_b84ca941-eb38-4105-8ccf-8ca269eb57ff_object",
        "targetHandle": "target_339fabc0-643d-46ff-acf0-989617ff5edc_object"
      },
      {
        "id": "reactflow__edge-b84ca941-eb38-4105-8ccf-8ca269eb57ffsource_b84ca941-eb38-4105-8ccf-8ca269eb57ff_object-f73d4adc-30c6-438d-8790-ae8b151fe2fftarget_f73d4adc-30c6-438d-8790-ae8b151fe2ff_object",
        "source": "b84ca941-eb38-4105-8ccf-8ca269eb57ff",
        "target": "f73d4adc-30c6-438d-8790-ae8b151fe2ff",
        "selected": false,
        "sourceHandle": "source_b84ca941-eb38-4105-8ccf-8ca269eb57ff_object",
        "targetHandle": "target_f73d4adc-30c6-438d-8790-ae8b151fe2ff_object"
      },
      {
        "id": "reactflow__edge-339fabc0-643d-46ff-acf0-989617ff5edcsource_339fabc0-643d-46ff-acf0-989617ff5edc_dataframe-08ec5f7d-c5ac-444a-99ba-296d8fde47f5target_08ec5f7d-c5ac-444a-99ba-296d8fde47f5_dataframe",
        "source": "339fabc0-643d-46ff-acf0-989617ff5edc",
        "target": "08ec5f7d-c5ac-444a-99ba-296d8fde47f5",
        "sourceHandle": "source_339fabc0-643d-46ff-acf0-989617ff5edc_dataframe",
        "targetHandle": "target_08ec5f7d-c5ac-444a-99ba-296d8fde47f5_dataframe"
      },
      {
        "id": "reactflow__edge-8b5de6a8-08c3-42a8-8a76-3a809e77bfddsource_8b5de6a8-08c3-42a8-8a76-3a809e77bfdd_dataframe-ff33980b-091b-42fa-b901-f67adb9db534target_ff33980b-091b-42fa-b901-f67adb9db534_dataframe",
        "source": "8b5de6a8-08c3-42a8-8a76-3a809e77bfdd",
        "target": "ff33980b-091b-42fa-b901-f67adb9db534",
        "sourceHandle": "source_8b5de6a8-08c3-42a8-8a76-3a809e77bfdd_dataframe",
        "targetHandle": "target_ff33980b-091b-42fa-b901-f67adb9db534_dataframe"
      },
      {
        "id": "reactflow__edge-f73d4adc-30c6-438d-8790-ae8b151fe2ffsource_f73d4adc-30c6-438d-8790-ae8b151fe2ff_dataframe-84c7d691-c5a8-4bea-8397-05bb30fa164btarget_84c7d691-c5a8-4bea-8397-05bb30fa164b_dataframe",
        "source": "f73d4adc-30c6-438d-8790-ae8b151fe2ff",
        "target": "84c7d691-c5a8-4bea-8397-05bb30fa164b",
        "sourceHandle": "source_f73d4adc-30c6-438d-8790-ae8b151fe2ff_dataframe",
        "targetHandle": "target_84c7d691-c5a8-4bea-8397-05bb30fa164b_dataframe"
      },
      {
        "id": "reactflow__edge-086ae4ec-d787-455e-a372-a98b2538f966source_086ae4ec-d787-455e-a372-a98b2538f966_object-1aa8de3e-d66c-496e-bcf3-b183ddd82f9ctarget_1aa8de3e-d66c-496e-bcf3-b183ddd82f9c_any",
        "source": "086ae4ec-d787-455e-a372-a98b2538f966",
        "target": "1aa8de3e-d66c-496e-bcf3-b183ddd82f9c",
        "sourceHandle": "source_086ae4ec-d787-455e-a372-a98b2538f966_object",
        "targetHandle": "target_1aa8de3e-d66c-496e-bcf3-b183ddd82f9c_any"
      },
      {
        "id": "reactflow__edge-086ae4ec-d787-455e-a372-a98b2538f966source_086ae4ec-d787-455e-a372-a98b2538f966_object-b84ca941-eb38-4105-8ccf-8ca269eb57fftarget_b84ca941-eb38-4105-8ccf-8ca269eb57ff_any",
        "source": "086ae4ec-d787-455e-a372-a98b2538f966",
        "target": "b84ca941-eb38-4105-8ccf-8ca269eb57ff",
        "sourceHandle": "source_086ae4ec-d787-455e-a372-a98b2538f966_object",
        "targetHandle": "target_b84ca941-eb38-4105-8ccf-8ca269eb57ff_any"
      },
      {
        "id": "reactflow__edge-086ae4ec-d787-455e-a372-a98b2538f966source_086ae4ec-d787-455e-a372-a98b2538f966_object-7f968e6e-33e7-432f-8328-623c0cb72d84target_7f968e6e-33e7-432f-8328-623c0cb72d84_object",
        "source": "086ae4ec-d787-455e-a372-a98b2538f966",
        "target": "7f968e6e-33e7-432f-8328-623c0cb72d84",
        "sourceHandle": "source_086ae4ec-d787-455e-a372-a98b2538f966_object",
        "targetHandle": "target_7f968e6e-33e7-432f-8328-623c0cb72d84_object"
      },
      {
        "id": "reactflow__edge-086ae4ec-d787-455e-a372-a98b2538f966source_086ae4ec-d787-455e-a372-a98b2538f966_object-50f67219-4834-46f6-97f9-69866a6ec952target_50f67219-4834-46f6-97f9-69866a6ec952_object",
        "source": "086ae4ec-d787-455e-a372-a98b2538f966",
        "target": "50f67219-4834-46f6-97f9-69866a6ec952",
        "sourceHandle": "source_086ae4ec-d787-455e-a372-a98b2538f966_object",
        "targetHandle": "target_50f67219-4834-46f6-97f9-69866a6ec952_object"
      },
      {
        "id": "reactflow__edge-50f67219-4834-46f6-97f9-69866a6ec952source_50f67219-4834-46f6-97f9-69866a6ec952_dataframe-ba7291a9-dcb6-47df-90d3-c8c5c8fa468dtarget_ba7291a9-dcb6-47df-90d3-c8c5c8fa468d_dataframe",
        "source": "50f67219-4834-46f6-97f9-69866a6ec952",
        "target": "ba7291a9-dcb6-47df-90d3-c8c5c8fa468d",
        "sourceHandle": "source_50f67219-4834-46f6-97f9-69866a6ec952_dataframe",
        "targetHandle": "target_ba7291a9-dcb6-47df-90d3-c8c5c8fa468d_dataframe"
      },
      {
        "id": "reactflow__edge-7f968e6e-33e7-432f-8328-623c0cb72d84source_7f968e6e-33e7-432f-8328-623c0cb72d84_dataframe-d4066246-51ed-40be-a036-e041d796fa7ctarget_d4066246-51ed-40be-a036-e041d796fa7c_dataframe",
        "source": "7f968e6e-33e7-432f-8328-623c0cb72d84",
        "target": "d4066246-51ed-40be-a036-e041d796fa7c",
        "sourceHandle": "source_7f968e6e-33e7-432f-8328-623c0cb72d84_dataframe",
        "targetHandle": "target_d4066246-51ed-40be-a036-e041d796fa7c_dataframe"
      }
    ],
    "nodes": [
      {
        "id": "ba7291a9-dcb6-47df-90d3-c8c5c8fa468d",
        "data": {
          "sql": "SELECT \n    'DICOM' AS vocabulary_id,\n    'Digital Imaging and Communications in Medicine (National Electrical Manufacturers Association)' AS vocabulary_name,\n    'https://www.dicomstandard.org/current' AS vocabulary_reference,\n    'NEMA Standard PS3' AS vocabulary_version,\n    2128000000 AS vocabulary_concept_id;",
          "name": "CreateVocabEntry",
          "error": false,
          "description": "Create vocab record",
          "errorMessage": null
        },
        "type": "sql_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1120, "y": -270 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1120, "y": -270 }
      },
      {
        "id": "80f6a837-6125-4ab2-8b60-ab7f2fac2731",
        "data": {
          "name": "IngestVocabTable",
          "error": false,
          "database": "alp_demo_pg_stg_1",
          "dataframe": "CreateVocabEntry",
          "schemaname": "testdicomingestcdm",
          "dbtablename": "vocabulary",
          "description": "Write to vocabulary table",
          "errorMessage": null
        },
        "type": "db_writer_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -670, "y": -270 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -670, "y": -270 }
      },
      {
        "id": "d4066246-51ed-40be-a036-e041d796fa7c",
        "data": {
          "sql": "SELECT \n    'DICOM Attributes' AS concept_class_id,\n    'DICOM Attributes' AS concept_class_name,\n    2128000001 AS concept_class_concept_id\n\nUNION ALL\n\nSELECT \n    'DICOM Value Sets' AS concept_class_id,\n    'DICOM Value Sets' AS concept_class_name,\n    2128000002 AS concept_class_concept_id\n;",
          "name": "CreateConceptClassEntry",
          "error": false,
          "description": "Create concept class records",
          "errorMessage": null
        },
        "type": "sql_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1120, "y": -20 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1120, "y": -20 }
      },
      {
        "id": "12d22e50-14aa-45c0-9d74-70c002b3fdbc",
        "data": {
          "name": "IngestConceptClassTable",
          "error": false,
          "database": "alp_demo_pg_stg_1",
          "dataframe": "CreateConceptClassEntry",
          "schemaname": "testdicomingestcdm",
          "dbtablename": "concept_class",
          "description": "Write to concept class table",
          "errorMessage": null
        },
        "type": "db_writer_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -670, "y": -20 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -670, "y": -20 }
      },
      {
        "id": "1aa8de3e-d66c-496e-bcf3-b183ddd82f9c",
        "data": {
          "name": "TransformConceptDf",
          "error": false,
          "description": "Read and transform concept records",
          "python_code": "import pandas as pd\nfrom pathlib import Path\n\ndef exec(myinput):\n\n  base_dir = Path(external_files)\n  filename = \"omop_table_staging_v3.csv\"\n  filepath = base_dir / filename\n  concept_df = pd.read_csv(filepath)\n\n\n  # From CSV Upload\n  #concept_df = myinput[\"UploadConceptCSV\"].result\n  \n  # Adjust its data types\n  concept_df['valid_start_date'] = pd.to_datetime('1993-01-01')\n  concept_df['valid_end_date'] = pd.to_datetime('2099-12-31')\n  concept_df['standard_concept'] = ' '\n  concept_df['invalid_reason'] = ' '\n\n  # make sure string values have datatype of str\n  varchar_columns = ['concept_name', 'domain_id', 'vocabulary_id', 'concept_class_id', 'standard_concept', 'concept_code', 'invalid_reason']\n  for col in varchar_columns:\n      concept_df[col] = concept_df[col].astype(str)\n\n  # handle NULLs for SQL \n  concept_df = concept_df.where(pd.notnull(concept_df), None)\n\n  return concept_df",
          "errorMessage": null
        },
        "type": "python_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1560, "y": 240 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1560, "y": 240 }
      },
      {
        "id": "45c20162-1bbd-4c23-94df-1aab8eaa5181",
        "data": {
          "map": {},
          "name": "GetConceptDf",
          "error": false,
          "uiMap": { "path": "$", "source": "TransformConceptDf" },
          "description": "Get concept records dataframe",
          "errorMessage": null
        },
        "type": "py2table_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1120, "y": 240 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1120, "y": 240 }
      },
      {
        "id": "de1a7740-824f-445f-8825-cb5d58fc17a5",
        "data": {
          "name": "IngestConceptTable",
          "error": false,
          "database": "alp_demo_pg_stg_1",
          "dataframe": "GetConceptDf",
          "schemaname": "testdicomingestcdm",
          "dbtablename": "concept",
          "description": "Write to concept table",
          "errorMessage": null
        },
        "type": "db_writer_node",
        "width": 354,
        "height": 214,
        "dragging": false,
        "position": { "x": -670, "y": 240 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -670, "y": 240 }
      },
      {
        "id": "b84ca941-eb38-4105-8ccf-8ca269eb57ff",
        "data": {
          "name": "TransformConceptRelationshipDfs",
          "error": false,
          "description": "Read and transform concept relationship records",
          "python_code": "import pandas as pd\nfrom pathlib import Path\n\ndef exec(myinput):\n  columns_to_use = [\"concept_id_1\", \"concept_id_2\", \"relationship_id\"]\n\n  base_dir = Path(external_files)\n  concept_relationship_staging_df = pd.read_pickle(f\"{base_dir}/part3_to_part16_relationship_via_CID.pkl\")\n  cs_values_maps_to_value_df = pd.read_csv(f\"{base_dir}/cs_values_maps_to_value.csv\")\n  cs_values_maps_to_df = pd.read_csv(f\"{base_dir}/cs_values_maps_to.csv\")\n  \n  # concept_relationship_staging_df = pd.read_pickle(f'{PATH_TO_EXTERNAL_FILES}/part3_to_part16_relationship_via_CID.pkl')\n  # cs_values_maps_to_value_df = myinput[\"UploadCSValueMapstoValue\"].result\n  # cs_values_maps_to_df = myinput[\"UploadCSValueMapsto\"].result\n\n  concept_relationship_staging_df[\"valid_start_date\"] = pd.to_datetime(concept_relationship_staging_df[\"valid_start_date\"].astype(str), format='%Y%m%d').dt.strftime('%Y%m%d')\n  concept_relationship_staging_df[\"valid_end_date\"] = pd.to_datetime(concept_relationship_staging_df[\"valid_end_date\"].astype(str), format='%Y%m%d').dt.strftime('%Y%m%d')\n\n  cs_values_maps_to_value_df[\"valid_start_date\"] = pd.to_datetime('1993-01-01')\n  cs_values_maps_to_value_df[\"valid_end_date\"] = pd.to_datetime('2099-12-31')\n\n  cs_values_maps_to_df[\"valid_start_date\"] = pd.to_datetime('1993-01-01')\n  cs_values_maps_to_df[\"valid_end_date\"] = pd.to_datetime('2099-12-31')\n\n  cs_values_maps_to_value_df = cs_values_maps_to_value_df.iloc[:, 1:]\n  cs_values_maps_to_df = cs_values_maps_to_df.iloc[:, 1:]\n\n  return {\n    \"concept_relationship_staging\": concept_relationship_staging_df,\n    \"cs_values_maps_to_value\": cs_values_maps_to_value_df,\n    \"cs_values_maps_to\": cs_values_maps_to_df\n  }",
          "errorMessage": null
        },
        "type": "python_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1570, "y": 740 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1570, "y": 740 }
      },
      {
        "id": "339fabc0-643d-46ff-acf0-989617ff5edc",
        "data": {
          "map": {},
          "name": "Get_concept_relationship_staging",
          "error": false,
          "uiMap": {
            "path": "$.concept_relationship_staging",
            "source": "TransformConceptRelationshipDfs"
          },
          "description": "Describe the task of node py2table_node_1",
          "errorMessage": null
        },
        "type": "py2table_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1120, "y": 490 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1120, "y": 490 }
      },
      {
        "id": "8b5de6a8-08c3-42a8-8a76-3a809e77bfdd",
        "data": {
          "map": {},
          "name": "Get_cs_values_maps_to_value",
          "error": false,
          "uiMap": {
            "path": "$.cs_values_maps_to_value",
            "source": "TransformConceptRelationshipDfs"
          },
          "description": "Describe the task of node py2table_node_2",
          "errorMessage": null
        },
        "type": "py2table_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1120, "y": 740 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1120, "y": 740 }
      },
      {
        "id": "f73d4adc-30c6-438d-8790-ae8b151fe2ff",
        "data": {
          "map": {},
          "name": "Get_cs_values_maps_to",
          "error": false,
          "uiMap": {
            "path": "$.cs_values_maps_to",
            "source": "TransformConceptRelationshipDfs"
          },
          "description": "Describe the task of node py2table_node_3",
          "errorMessage": null
        },
        "type": "py2table_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1130, "y": 1000 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1130, "y": 1000 }
      },
      {
        "id": "ff33980b-091b-42fa-b901-f67adb9db534",
        "data": {
          "name": "IngestConceptRelationship2",
          "error": false,
          "database": "alp_demo_pg_stg_1",
          "dataframe": "Get_cs_values_maps_to_value",
          "schemaname": "testdicomingestcdm",
          "dbtablename": "concept_relationship",
          "description": "Write to concept relationship table 2",
          "errorMessage": null
        },
        "type": "db_writer_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -670, "y": 740 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -670, "y": 740 }
      },
      {
        "id": "08ec5f7d-c5ac-444a-99ba-296d8fde47f5",
        "data": {
          "name": "IngestConceptRelationship1",
          "error": false,
          "database": "alp_demo_pg_stg_1",
          "dataframe": "Get_concept_relationship_staging",
          "schemaname": "testdicomingestcdm",
          "dbtablename": "concept_relationship",
          "description": "Write to concept relationship table 1",
          "errorMessage": null
        },
        "type": "db_writer_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -670, "y": 490 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -670, "y": 490 }
      },
      {
        "id": "84c7d691-c5a8-4bea-8397-05bb30fa164b",
        "data": {
          "name": "IngestConceptRelationship3",
          "error": false,
          "database": "alp_demo_pg_stg_1",
          "dataframe": "Get_cs_values_maps_to",
          "schemaname": "testdicomingestcdm",
          "dbtablename": "concept_relationship",
          "description": "Write to concept relationship table 3",
          "errorMessage": null
        },
        "type": "db_writer_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -670, "y": 1000 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -670, "y": 1000 }
      },
      {
        "id": "086ae4ec-d787-455e-a372-a98b2538f966",
        "data": {
          "name": "TruncateTables",
          "error": false,
          "description": "Truncate vocab tables before ingestion",
          "python_code": "from _shared_flow_utils.dao.DBDao import DBDao\n\ndef exec(myinput):\n\n  if truncate_tables == \"True\":\n    dbdao = DBDao(use_cache_db=False, database_code=database_code)\n\n    # Truncate tables\n    dbdao.truncate_table(vocab_schema, \"vocabulary\")\n    dbdao.truncate_table(vocab_schema, \"concept_class\")\n    dbdao.truncate_table(vocab_schema,\"concept\")\n    dbdao.truncate_table(vocab_schema,\"concept_relationship\")\n    \n  return {\"status\": True}",
          "errorMessage": null
        },
        "type": "python_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -2110, "y": 500 },
        "selected": true,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -2110, "y": 500 }
      },
      {
        "id": "50f67219-4834-46f6-97f9-69866a6ec952",
        "data": {
          "map": {},
          "name": "ConnectingNode",
          "error": false,
          "uiMap": { "path": "$", "source": "TruncateTables" },
          "description": "Connecting Node",
          "errorMessage": null
        },
        "type": "py2table_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1560, "y": -270 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1560, "y": -270 }
      },
      {
        "id": "7f968e6e-33e7-432f-8328-623c0cb72d84",
        "data": {
          "map": {},
          "name": "ConnectingNode",
          "uiMap": { "path": "$", "source": "TruncateTables" },
          "description": "Connecting Node"
        },
        "type": "py2table_node",
        "width": 350,
        "height": 210,
        "dragging": false,
        "position": { "x": -1560, "y": -20 },
        "selected": false,
        "dragHandle": "",
        "sourcePosition": "right",
        "targetPosition": "left",
        "positionAbsolute": { "x": -1560, "y": -20 }
      }
    ],
    "variables": [
      { "key": "external_files", "value": "/app/externalfiles" },
      { "key": "truncate_tables", "value": "True" },
      { "key": "database_code", "value": "alp_demo_pg_stg_1" },
      { "key": "vocab_schema", "value": "testdicomingestcdm" }
    ],
    "importLibs": []
}